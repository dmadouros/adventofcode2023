/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package starter

data class Round(val red: Int = 0, val green: Int = 0, val blue: Int = 0)

data class Game(val id: Int, val rounds: List<Round>)

data class Bag(val red: Int, val green: Int, val blue: Int)

fun parseGames(filename: String): List<Game> {
  val regex = """^(\d+)\s(blue|green|red)$""".toRegex()
  return object {}.javaClass.getResourceAsStream(filename).bufferedReader().readLines().map { line
    ->
    val gameId = line.split(":").first().drop(5).toInt()
    val rounds =
        line.split(":").drop(1).flatMap {
          it.split(";").map { roundData ->
            roundData.split(",").fold(Round()) { round, cubes ->
              val matchResults = regex.find(cubes.trim())?.groupValues
              val count = matchResults?.get(1)?.toInt()!!
              when (matchResults?.get(2)) {
                "red" -> round.copy(red = count)
                "green" -> round.copy(green = count)
                "blue" -> round.copy(blue = count)
                else -> throw RuntimeException()
              }
            }
          }
        }
    Game(id = gameId, rounds = rounds)
  }
}

class Part1 {
  fun exec(): Int {
    val bag = Bag(red = 12, green = 13, blue = 14)

    return parseGames("/input.txt")
        .filter { game ->
          game.rounds.all { round ->
            round.red <= bag.red && round.green <= bag.green && round.blue <= bag.blue
          }
        }
        .map { game -> game.id }
        .sum()
  }
}

class Part2 {
  fun exec(): Int =
      parseGames("/input.txt")
          .map { game ->
            val maxRed = game.rounds.maxBy { it.red }.red
            val maxGreen = game.rounds.maxBy { it.green }.green
            val maxBlue = game.rounds.maxBy { it.blue }.blue
            Triple(maxRed, maxGreen, maxBlue)
          }
          .map { (maxRed, maxGreen, maxBlue) -> maxRed * maxGreen * maxBlue }
          .sum()
}

fun main() {
  println(Part1().exec())
  println(Part2().exec())
}
